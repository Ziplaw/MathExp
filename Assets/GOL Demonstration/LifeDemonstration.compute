#pragma kernel Simulate
RWTexture2D<float4> Result;

[numthreads(8,8,1)]
void Simulate(uint3 id : SV_DispatchThreadID)
{
    // if a cell is alive and it has 2 or 3 neighbours, it stays alive, otherwise, it dies;
    // if a cell is dead and has exactly 3 neighbours, it becomes alive;

    int currentCell = Result[id.xy].r;

    int cellUp = Result[float2(id.x, id.y + 1)].r;
    int cellUpLeft = Result[float2(id.x - 1, id.y + 1)].r;
    int cellUpRight = Result[float2(id.x + 1, id.y + 1)].r;

    int cellDown = Result[float2(id.x, id.y - 1)].r;
    int cellDownLeft = Result[float2(id.x - 1, id.y - 1)].r;
    int cellDownRight = Result[float2(id.x + 1, id.y - 1)].r;

    int cellLeft = Result[float2(id.x - 1, id.y)].r;
    int cellRight = Result[float2(id.x + 1, id.y)].r;

    int totalAmountOfLiveNeighboringCells = cellUp + cellUpLeft + cellUpRight + cellLeft + cellRight + cellDown +
        cellDownLeft + cellDownRight;
    int alive = 0;

    alive = floor(((totalAmountOfLiveNeighboringCells | currentCell)^12)/15);
    
    // if (currentCell == 1)
    // {
    //     if (totalAmountOfLiveNeighboringCells == 2 || totalAmountOfLiveNeighboringCells == 3) alive = 1;
    // }
    // else
    // {
    //     if (totalAmountOfLiveNeighboringCells == 3) alive = 1;
    // }

    float4 color = float4(alive,alive,alive,1);
    Result[id.xy] = color;
    
}

#pragma kernel GenerateNoiseTexture

// Hash function from H. Schechter & R. Bridson, goo.gl/RXiKaH
uint Hash(uint s)
{
    s ^= 2747636419u;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    return s;
}

float Random(uint seed)
{
    return float(Hash(seed)) / 4294967295.0; // 2^32-1
}

int width;
RWTexture2D<float4> Generated;
[numthreads(8,8,1)]
void GenerateNoiseTexture(uint3 id : SV_DispatchThreadID)
{
    Generated[id.xy] =  round( Random(id.x + width * id.y));
}

